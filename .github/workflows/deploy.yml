name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    environment: production  # 添加环境保护
    env:
      CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Verify Cloudflare Credentials
        run: |
          echo "🔍 验证 Cloudflare 凭据..."
          
          # 检查必需的环境变量
          if [ -z "$CLOUDFLARE_API_KEY" ]; then
            echo "❌ CLOUDFLARE_API_KEY 环境变量未设置"
            echo "请在 GitHub Secrets 中添加 CLOUDFLARE_API_KEY"
            exit 1
          fi
          
          if [ -z "$CLOUDFLARE_EMAIL" ]; then
            echo "❌ CLOUDFLARE_EMAIL 环境变量未设置"
            echo "请在 GitHub Secrets 中添加 CLOUDFLARE_EMAIL"
            exit 1
          fi
          
          echo "✅ CLOUDFLARE_API_KEY 已设置"
          echo "✅ CLOUDFLARE_EMAIL 已设置"
          
          # 验证用户信息
          echo "👤 验证用户信息..."
          pnpm exec wrangler whoami || {
            echo "❌ 无法获取用户信息，请检查 Global API Key 和邮箱是否正确"
            echo "📧 邮箱应该是: $CLOUDFLARE_EMAIL"
            exit 1
          }
          
          echo "✅ Cloudflare 凭据验证通过"

      - name: Create or verify KV namespace
        run: |
          echo "🗂️ 检查和创建 KV 命名空间..."
          
          # 检查现有的 KV 命名空间
          echo "📋 列出现有的 KV 命名空间..."
          pnpm exec wrangler kv namespace list
          
          # 尝试创建 custom_hosts 命名空间
          echo "🆕 创建 custom_hosts KV 命名空间..."
          KV_OUTPUT=$(pnpm exec wrangler kv namespace create "custom_hosts" 2>&1)
          echo "$KV_OUTPUT"
          
          # 提取新的 KV ID
          if echo "$KV_OUTPUT" | grep -q "id"; then
            NEW_KV_ID=$(echo "$KV_OUTPUT" | grep -o '"id": "[^"]*"' | cut -d'"' -f4)
            echo "✅ KV 命名空间创建成功，ID: $NEW_KV_ID"
            
            # 更新 wrangler.toml 中的 KV ID
            if [ -n "$NEW_KV_ID" ]; then
              echo "📝 更新 wrangler.toml 中的 KV ID..."
              sed -i "s/id = \".*\"/id = \"$NEW_KV_ID\"/" wrangler.toml
              sed -i "s/preview_id = \".*\"/preview_id = \"$NEW_KV_ID\"/" wrangler.toml
              echo "✅ wrangler.toml 已更新"
              
              # 显示更新后的配置
              echo "📄 更新后的 KV 配置："
              grep -A 3 "kv_namespaces" wrangler.toml
            fi
          else
            echo "⚠️ 可能 KV 命名空间已存在或创建失败"
            echo "💡 尝试检查现有命名空间是否可用..."
          fi

      - name: Create KV namespace (if needed)
        run: |
          # 如果设置了创建新 KV 的标志，或者总是尝试创建（用于备用）
          echo "🔍 检查是否需要创建额外的 KV 命名空间..."
          if [ "${{ secrets.CREATE_NEW_KV }}" = "true" ]; then
            echo "🆕 创建额外的 github_hosts KV 命名空间..."
            pnpm exec wrangler kv namespace create "github_hosts"
          else
            echo "⏭️ 跳过额外 KV 命名空间创建"
          fi

      - name: Deploy to Cloudflare Workers
        run: |
          echo "🚀 开始部署到 Cloudflare Workers..."
          
          # 尝试部署，如果失败则提供详细的错误信息
          if ! pnpm run deploy; then
            echo ""
            echo "❌ 部署失败！"
            echo "🔧 常见解决方案："
            echo "1. 检查 Global API Key 是否正确"
            echo "2. 确认邮箱地址与 Cloudflare 账户匹配"
            echo "3. 确认 wrangler.toml 中的配置正确"
            echo "4. 检查是否有足够的 Workers 订阅配额"
            echo ""
            echo "🔗 Global API Key: https://dash.cloudflare.com/profile/api-tokens"
            exit 1
          fi
          
          echo "✅ 部署成功！"

      - name: Set secrets
        run: |
          echo "🔐 设置 Worker secrets..."
          
          # 设置 API Key
          if [ -n "${{ secrets.WORKER_API_KEY }}" ]; then
            echo "📝 设置 API_KEY..."
            echo "${{ secrets.WORKER_API_KEY }}" | pnpm exec wrangler secret put API_KEY
            echo "✅ API_KEY 设置完成"
          else
            echo "⚠️ WORKER_API_KEY secret 未设置，跳过"
          fi
          
          # 设置优选功能开关
          if [ -n "${{ secrets.ENABLE_OPTIMIZATION }}" ]; then
            echo "📝 设置 ENABLE_OPTIMIZATION 为: ${{ secrets.ENABLE_OPTIMIZATION }}"
            echo "${{ secrets.ENABLE_OPTIMIZATION }}" | pnpm exec wrangler secret put ENABLE_OPTIMIZATION
          else
            echo "📝 设置 ENABLE_OPTIMIZATION 为默认值: false"
            echo "false" | pnpm exec wrangler secret put ENABLE_OPTIMIZATION
          fi
          echo "✅ Secrets 设置完成"

      - name: Commit updated wrangler.toml (if changed)
        run: |
          # 检查 wrangler.toml 是否有变化
          if git diff --quiet wrangler.toml; then
            echo "📄 wrangler.toml 没有变化"
          else
            echo "📝 wrangler.toml 有变化，准备提交..."
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add wrangler.toml
            git commit -m "chore: 更新 KV 命名空间 ID [skip ci]" || echo "没有变化需要提交"
            
            # 注意：这里不推送，因为我们在 CI 中，避免触发新的构建
            echo "ℹ️ 配置已更新，下次推送时会包含新的 KV ID"
          fi
