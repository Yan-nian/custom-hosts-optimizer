name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # 允许手动触发

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    environment: production  # 添加环境保护
    env:
      CLOUDFLARE_API_KEY: ${{ secrets.CLOUDFLARE_API_KEY }}
      CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Verify Cloudflare Credentials
        run: |
          echo "🔍 验证 Cloudflare 凭据..."
          
          # 检查必需的环境变量
          if [ -z "$CLOUDFLARE_API_KEY" ]; then
            echo "❌ CLOUDFLARE_API_KEY 环境变量未设置"
            echo "请在 GitHub Secrets 中添加 CLOUDFLARE_API_KEY"
            exit 1
          fi
          
          if [ -z "$CLOUDFLARE_EMAIL" ]; then
            echo "❌ CLOUDFLARE_EMAIL 环境变量未设置"
            echo "请在 GitHub Secrets 中添加 CLOUDFLARE_EMAIL"
            exit 1
          fi
          
          echo "✅ CLOUDFLARE_API_KEY 已设置"
          echo "✅ CLOUDFLARE_EMAIL 已设置"
          
          # 验证用户信息
          echo "👤 验证用户信息..."
          pnpm exec wrangler whoami || {
            echo "❌ 无法获取用户信息，请检查 Global API Key 和邮箱是否正确"
            echo "📧 邮箱应该是: $CLOUDFLARE_EMAIL"
            exit 1
          }
          
          echo "✅ Cloudflare 凭据验证通过"

      - name: Detect existing deployment configuration
        run: |
          echo "� 检测现有部署配置..."
          
          # 检查是否已经有 Worker 部署
          echo "📋 检查现有 Workers..."
          WORKER_LIST=$(pnpm exec wrangler list 2>/dev/null || echo "[]")
          
          # 从 wrangler.toml 获取预期的 Worker 名称
          EXPECTED_WORKER_NAME=$(grep '^name = ' wrangler.toml | sed 's/name = "\([^"]*\)"/\1/')
          echo "📝 预期的 Worker 名称: $EXPECTED_WORKER_NAME"
          
          # 检查 Worker 是否已存在
          if echo "$WORKER_LIST" | grep -q "$EXPECTED_WORKER_NAME"; then
            echo "✅ 发现已存在的 Worker: $EXPECTED_WORKER_NAME"
            echo "WORKER_EXISTS=true" >> $GITHUB_ENV
            echo "DEPLOYMENT_MODE=update" >> $GITHUB_ENV
            
            # 尝试获取 Worker 的详细信息
            echo "📊 获取 Worker 详细信息..."
            pnpm exec wrangler status || echo "⚠️ 无法获取 Worker 状态，将继续部署"
            
          else
            echo "🆕 未发现现有 Worker，将进行首次部署"
            echo "WORKER_EXISTS=false" >> $GITHUB_ENV
            echo "DEPLOYMENT_MODE=initial" >> $GITHUB_ENV
          fi

      - name: Smart configuration management
        run: |
          echo "🧠 智能配置管理 (模式: $DEPLOYMENT_MODE)..."
          
          if [ "$DEPLOYMENT_MODE" = "update" ]; then
            echo "🔄 更新模式: 基于现有部署进行热更新"
            
            # 从现有部署中学习配置
            echo "📚 从现有部署学习配置..."
            
            # 获取当前配置的 KV ID
            CURRENT_KV_ID=$(grep -A 5 '\[\[kv_namespaces\]\]' wrangler.toml | grep 'id = ' | head -1 | sed 's/.*id = "\([^"]*\)".*/\1/')
            
            if [ -n "$CURRENT_KV_ID" ] && [ "$CURRENT_KV_ID" != "" ]; then
              echo "📋 使用配置文件中的 KV ID"
              
              # 验证 KV 是否真实存在
              KV_LIST=$(pnpm exec wrangler kv namespace list)
              if echo "$KV_LIST" | grep -q "$CURRENT_KV_ID"; then
                echo "✅ KV 命名空间验证成功"
                KV_NAMESPACE_ID="$CURRENT_KV_ID"
              else
                echo "⚠️ 配置的 KV 不存在，尝试查找备用 KV..."
                if echo "$KV_LIST" | grep -q "custom_hosts"; then
                  BACKUP_KV_ID=$(echo "$KV_LIST" | grep "custom_hosts" | sed 's/.*"id": "\([^"]*\)".*/\1/' | head -1)
                  echo "🔄 使用备用 KV: $BACKUP_KV_ID"
                  KV_NAMESPACE_ID="$BACKUP_KV_ID"
                  
                  # 更新配置文件
                  sed -i "s/id = \".*\"/id = \"$BACKUP_KV_ID\"/" wrangler.toml
                  sed -i "s/preview_id = \".*\"/preview_id = \"$BACKUP_KV_ID\"/" wrangler.toml
                  echo "CONFIG_UPDATED=true" >> $GITHUB_ENV
                else
                  echo "❌ 无法找到合适的 KV 命名空间"
                  exit 1
                fi
              fi
            else
              echo "❌ 无法从配置文件获取 KV ID"
              exit 1
            fi
            
          else
            echo "🆕 初始部署模式: 创建或查找 KV 命名空间"
            
            # 获取当前配置的 KV ID
            CURRENT_KV_ID=$(grep -A 5 '\[\[kv_namespaces\]\]' wrangler.toml | grep 'id = ' | head -1 | sed 's/.*id = "\([^"]*\)".*/\1/')
            
            if [ -z "$CURRENT_KV_ID" ]; then
              echo "⚠️ 配置文件中没有 KV ID，需要创建或查找"
              
              # 检查是否已有 custom_hosts KV
              KV_LIST=$(pnpm exec wrangler kv namespace list)
              if echo "$KV_LIST" | grep -q "custom_hosts"; then
                echo "🔍 发现现有的 custom_hosts 命名空间"
                EXISTING_KV_ID=$(echo "$KV_LIST" | grep "custom_hosts" | sed 's/.*"id": "\([^"]*\)".*/\1/' | head -1)
                echo "📝 将使用现有的 KV 命名空间"
                KV_NAMESPACE_ID="$EXISTING_KV_ID"
                
                # 更新配置文件
                sed -i "s/id = \".*\"/id = \"$EXISTING_KV_ID\"/" wrangler.toml
                sed -i "s/preview_id = \".*\"/preview_id = \"$EXISTING_KV_ID\"/" wrangler.toml
                echo "CONFIG_UPDATED=true" >> $GITHUB_ENV
              else
                echo "🆕 创建新的 custom_hosts KV 命名空间..."
                KV_OUTPUT=$(pnpm exec wrangler kv namespace create "custom_hosts" 2>&1)
                
                if echo "$KV_OUTPUT" | grep -q "id"; then
                  NEW_KV_ID=$(echo "$KV_OUTPUT" | grep -o '"id": "[^"]*"' | cut -d'"' -f4)
                  echo "✅ 新 KV 命名空间创建成功"
                  KV_NAMESPACE_ID="$NEW_KV_ID"
                  
                  # 更新配置文件
                  sed -i "s/id = \".*\"/id = \"$NEW_KV_ID\"/" wrangler.toml
                  sed -i "s/preview_id = \".*\"/preview_id = \"$NEW_KV_ID\"/" wrangler.toml
                  echo "CONFIG_UPDATED=true" >> $GITHUB_ENV
                else
                  echo "❌ KV 命名空间创建失败"
                  exit 1
                fi
              fi
            else
              echo "📋 使用配置文件中的 KV ID: (已配置)"
              KV_NAMESPACE_ID="$CURRENT_KV_ID"
            fi
          fi
          
          # 记录最终配置
          echo "KV_NAMESPACE_ID=$KV_NAMESPACE_ID" >> $GITHUB_ENV
          echo "KV_NAMESPACE_NAME=custom_hosts" >> $GITHUB_ENV
          
          # 创建部署信息文件
          cat > deployment-info.json << EOF
          {
            "deployment_mode": "$DEPLOYMENT_MODE",
            "worker_exists": "$WORKER_EXISTS",
            "namespace_name": "custom_hosts",
            "binding_name": "custom_hosts",
            "config_updated": "${CONFIG_UPDATED:-false}",
            "deployment_time": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "run_number": "${{ github.run_number }}"
          }
          EOF
          
          echo "📄 部署信息已记录"
          
          # 验证最终配置
          echo "📄 验证最终配置:"
          if grep -q "binding = \"custom_hosts\"" wrangler.toml; then
            echo "✅ KV 绑定配置正确"
          else
            echo "❌ KV 绑定配置异常"
            exit 1
          fi

      - name: Deploy to Cloudflare Workers
        run: |
          echo "🚀 开始部署到 Cloudflare Workers..."
          echo "📊 部署模式: $DEPLOYMENT_MODE"
          echo "📊 使用 KV 命名空间: custom_hosts"
          
          # 根据部署模式显示不同信息
          if [ "$DEPLOYMENT_MODE" = "update" ]; then
            echo "🔄 执行热更新部署..."
          else
            echo "🆕 执行首次部署..."
          fi
          
          # 执行部署
          if ! pnpm run deploy; then
            echo ""
            echo "❌ 部署失败！"
            echo "🔧 常见解决方案："
            echo "1. 检查 Global API Key 是否正确"
            echo "2. 确认邮箱地址与 Cloudflare 账户匹配"
            echo "3. 确认 wrangler.toml 中的配置正确"
            echo "4. 检查是否有足够的 Workers 订阅配额"
            echo "5. 验证 KV 命名空间配置是否正确"
            echo ""
            echo "🔗 Global API Key: https://dash.cloudflare.com/profile/api-tokens"
            echo "📄 当前部署信息:"
            cat deployment-info.json
            exit 1
          fi
          
          echo "✅ 部署成功！"
          if [ "$DEPLOYMENT_MODE" = "update" ]; then
            echo "🎉 Worker 热更新完成"
          else
            echo "🎉 Worker 首次部署完成"
          fi
          
          # 部署后获取最新信息
          echo "📊 获取部署后信息..."
          pnpm exec wrangler status || echo "⚠️ 无法获取最新状态"

      - name: Set secrets
        run: |
          echo "🔐 设置 Worker secrets..."
          
          # 设置 API Key
          if [ -n "${{ secrets.WORKER_API_KEY }}" ]; then
            echo "📝 设置 API_KEY..."
            echo "${{ secrets.WORKER_API_KEY }}" | pnpm exec wrangler secret put API_KEY
            echo "✅ API_KEY 设置完成"
          else
            echo "⚠️ WORKER_API_KEY secret 未设置，跳过"
          fi
          
          # 设置优选功能开关
          if [ -n "${{ secrets.ENABLE_OPTIMIZATION }}" ]; then
            echo "📝 设置 ENABLE_OPTIMIZATION 为: ${{ secrets.ENABLE_OPTIMIZATION }}"
            echo "${{ secrets.ENABLE_OPTIMIZATION }}" | pnpm exec wrangler secret put ENABLE_OPTIMIZATION
          else
            echo "📝 设置 ENABLE_OPTIMIZATION 为默认值: false"
            echo "false" | pnpm exec wrangler secret put ENABLE_OPTIMIZATION
          fi
          echo "✅ Secrets 设置完成"

      - name: Save deployment info
        uses: actions/upload-artifact@v4
        with:
          name: deployment-info
          path: deployment-info.json
          retention-days: 30

      - name: Commit updated configuration (if changed)
        if: env.CONFIG_UPDATED == 'true'
        run: |
          echo "📝 配置已更新，准备提交..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add wrangler.toml
          
          # 构建提交消息
          RUN_NUMBER="${{ github.run_number }}"
          CURRENT_TIME=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          # 创建提交消息
          echo "chore: 自动学习并更新部署配置" > commit_message.txt
          echo "" >> commit_message.txt
          echo "部署模式: $DEPLOYMENT_MODE" >> commit_message.txt
          echo "配置来源: 从现有部署学习" >> commit_message.txt
          echo "更新时间: $CURRENT_TIME" >> commit_message.txt
          echo "部署运行: #$RUN_NUMBER" >> commit_message.txt
          echo "" >> commit_message.txt
          echo "[skip ci]" >> commit_message.txt
          
          git commit -F commit_message.txt || echo "没有变化需要提交"
          rm -f commit_message.txt
          
          echo "ℹ️ 配置已学习并更新，下次将使用学习到的配置进行热更新"
